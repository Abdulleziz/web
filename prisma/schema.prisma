generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model ForumTag {
    id        String        @id @default(cuid())
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt
    name      String        @unique
    threads   ForumThread[]
}

model ForumThread {
    id        String      @id @default(cuid())
    title     String      @db.TinyText
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    locked    Boolean     @default(false)
    creatorId String
    posts     ForumPost[]
    tags      ForumTag[]
    creator   User        @relation(fields: [creatorId], references: [id], onDelete: Cascade)

    @@index([creatorId])
}

model ForumPost {
    id        String      @id @default(cuid())
    message   String      @db.Text
    createdAt DateTime    @default(now())
    threadId  String
    creatorId String
    thread    ForumThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
    creator   User        @relation(fields: [creatorId], references: [id], onDelete: Cascade)

    @@index([threadId])
    @@index([creatorId])
}

model CronJob {
    id       String  @id @default(cuid())
    cron     String  @unique @db.Char(13)
    jobId    String  @unique
    title    String
    isGlobal Boolean @default(false)

    lastRun   DateTime?
    listeners CronListener[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CronListener {
    id       String  @id @default(cuid())
    isAuthor Boolean @default(false)
    isActive Boolean @default(true)

    listener   User   @relation(fields: [listenerId], references: [id], onDelete: Restrict) /// in order to delete a user, you must first delete all of their cron listeners (or job if no listeners)
    listenerId String

    cronJob   CronJob @relation(fields: [cronJobId], references: [id], onDelete: Cascade)
    cronJobId String

    @@index([listenerId])
    @@index([cronJobId])
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String?        @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    forumThreads  ForumThread[]
    forumPosts    ForumPost[]
    listenedCrons CronListener[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model ForumTagToForumThread {
    A String
    B String

    @@unique([A, B], map: "_ForumTagToForumThread_AB_unique")
    @@index([B], map: "_ForumTagToForumThread_B_index")
    @@map("_ForumTagToForumThread")
}
