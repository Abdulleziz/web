generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

enum ForumNotification {
    all
    mentions
    none
}

model ForumNotify {
    thread   ForumThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
    threadId String

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    preference ForumNotification

    @@id([threadId, userId])
    @@index([threadId])
    @@index([userId])
}

model ForumTag {
    id        String        @id @default(cuid())
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt
    name      String        @unique
    threads   ForumThread[]
}

model ForumPin {
    id        String   @id
    createdAt DateTime @default(now())

    pinnedBy   User   @relation(fields: [pinnedById], references: [id], onDelete: Cascade)
    pinnedById String

    thread ForumThread @relation(fields: [id], references: [id], onDelete: Cascade)

    @@index([id])
    @@index([pinnedById])
}

model ForumThread {
    id            String            @id @default(cuid())
    title         String            @db.TinyText
    createdAt     DateTime          @default(now())
    updatedAt     DateTime          @updatedAt
    locked        Boolean           @default(false) // TODO: datetime
    creatorId     String
    posts         ForumPost[]
    tags          ForumTag[]
    creator       User              @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    pin           ForumPin?
    notifications ForumNotify[]
    defaultNotify ForumNotification @default(all)

    @@index([creatorId])
}

model ForumPost {
    id        String      @id @default(cuid())
    message   String      @db.Text
    createdAt DateTime    @default(now())
    threadId  String
    creatorId String
    thread    ForumThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
    creator   User        @relation(fields: [creatorId], references: [id], onDelete: Cascade)

    @@index([threadId])
    @@index([creatorId])
}

model CronJob {
    id       String  @id @default(cuid())
    cron     String  @unique @db.Char(13)
    jobId    String  @unique
    title    String
    isGlobal Boolean @default(false)

    lastRun   DateTime?
    listeners CronListener[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CronListener {
    id       String  @id @default(cuid())
    isAuthor Boolean @default(true)
    isActive Boolean @default(true)

    listener   User   @relation(fields: [listenerId], references: [id], onDelete: Restrict) /// in order to delete a user, you must first delete all of their cron listeners (or job if no listeners)
    listenerId String

    cronJob   CronJob @relation(fields: [cronJobId], references: [id], onDelete: Cascade)
    cronJobId String

    @@unique([listenerId, cronJobId]) /// a user can only listen to a job once
    @@index([listenerId])
    @@index([cronJobId])
}

model EntityPurchase {
    id        String   @id @default(cuid())
    entityId  Int
    quantity  Int
    createdAt DateTime @default(now())

    invoice   Invoice? @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
    invoiceId String?

    bankInvoice   BankInvoice? @relation(fields: [bankInvoiceId], references: [id], onDelete: Cascade)
    bankInvoiceId String?

    @@unique([entityId, invoiceId])
    @@unique([entityId, bankInvoiceId])
    @@index([invoiceId])
    @@index([bankInvoiceId])
}

model Invoice {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    to   User   @relation("invoices", fields: [toId], references: [id], onDelete: Cascade)
    toId String

    entities EntityPurchase[]

    @@index([toId])
}

model Transfer {
    id        String   @id @default(cuid())
    amount    Int
    createdAt DateTime @default(now())

    from   User?   @relation("transferSender", fields: [fromId], references: [id], onDelete: SetNull)
    fromId String?

    to   User   @relation("transferReciever", fields: [toId], references: [id], onDelete: Cascade)
    toId String

    @@index([fromId])
    @@index([toId])
}

model Salary {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    severity  Int

    to   User   @relation(fields: [toId], references: [id], onDelete: Cascade)
    toId String

    bankSalary   BankSalary @relation(fields: [bankSalaryId], references: [id], onDelete: Cascade)
    bankSalaryId String

    @@unique([bankSalaryId, toId])
    @@index([bankSalaryId])
    @@index([toId])
}

enum BankTransactionOperations {
    deposit
    withdraw
}

model BankTransaction {
    id        String                    @id @default(cuid())
    amount    Int
    operation BankTransactionOperations

    reference   User?    @relation(fields: [referenceId], references: [id], onDelete: SetNull)
    referenceId String?
    createdAt   DateTime @default(now())

    gamble GambleResult?

    @@index([referenceId])
}

model GambleResult {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    transaction   BankTransaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
    transactionId String          @unique

    @@index([transactionId])
}

model BankSalary {
    id         String    @id @default(cuid())
    multiplier Float
    createdAt  DateTime  @default(now())
    paidAt     DateTime?

    salaries Salary[]
}

model BankInvoice {
    id        String           @id @default(cuid())
    createdAt DateTime         @default(now())
    entities  EntityPurchase[]
}

model StateOfEmergency {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    endedAt   DateTime?
}

model DictionaryMeme {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name        String @unique
    description String @db.Text
}

model ConsumeTea {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    amountGram  Int
    amountSugar Int

    consumerId String
    consumer   User   @relation(fields: [consumerId], references: [id], onDelete: Cascade)

    @@index([consumerId])
}

model Vote {
    id        String   @id @default(cuid())
    voter     String /// discord.id
    createdAt DateTime @default(now())

    event   VoteEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
    eventId String

    @@unique([eventId, voter])
    @@index([eventId])
    @@index([voter])
}

model VoteEvent {
    id         String    @id @default(cuid())
    role       String
    beforeRole String?
    target     String /// discord.id
    votes      Vote[]
    createdAt  DateTime  @default(now())
    endedAt    DateTime?
    jobId      String?   @unique

    @@index([role])
}

model VoteCEO {
    id        String   @id @default(cuid())
    voter     String /// discord.id
    target    String /// discord.id
    createdAt DateTime @default(now())

    event   VoteEventCEO @relation(fields: [eventId], references: [id], onDelete: Cascade)
    eventId String

    @@unique([eventId, voter])
    @@index([eventId])
    @@index([voter])
}

model VoteEventCEO {
    id        String    @id @default(cuid())
    votes     VoteCEO[]
    createdAt DateTime  @default(now())
    endedAt   DateTime?
    jobId     String?   @unique
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                  String             @id @default(cuid())
    name                String?
    email               String?            @unique
    emailVerified       DateTime?
    image               String?
    accounts            Account[]
    sessions            Session[]
    forumThreads        ForumThread[]
    forumPosts          ForumPost[]
    listenedCrons       CronListener[]
    ForumPin            ForumPin[]
    transfersSent       Transfer[]         @relation("transferSender")
    transfersRecieved   Transfer[]         @relation("transferReciever")
    teaConsumer         ConsumeTea[]
    threadNotify        ForumNotify[]
    defaultThreadNotify ForumNotification  @default(mentions)
    pushSubscriptions   PushSubscription[]
    bankTransactions    BankTransaction[]
    invoices            Invoice[]          @relation("invoices")
    salaries            Salary[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model PushSubscription {
    endpoint  String   @id @db.VarChar(500)
    p256dh    String
    auth      String
    createdAt DateTime @default(now())

    user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String?

    @@index([userId])
}
